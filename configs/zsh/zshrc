# Set the directory we want to stare zinit and plugin.
ZINIT_HOME="${HOME}/.config/.dotfiles/configs/zinit/"

#Downoald Zinit
if [ ! -d "$ZINIT_HOME" ]; then
	mkdir -p "$(dirname $ZINIT_HOME)"
	git clone git@github.com:zdharma-continuum/zinit.git "$ZINIT_HOME"

fi

# Source zinit
source "${ZINIT_HOME}zinit.zsh"

# Zsh plugins
zinit light zsh-users/zsh-syntax-highlighting
zinit light zsh-users/zsh-completions
zinit light zsh-users/zsh-autosuggestions
zinit light Aloxaf/fzf-tab

# Add in snippets
zinit snippet OMZL::git.zsh
zinit snippet OMZP::git
zinit snippet OMZP::sudo
zinit snippet OMZP::archlinux
zinit snippet OMZP::aws
zinit snippet OMZP::kubectl
zinit snippet OMZP::kubectx
zinit snippet OMZP::command-not-found

# Load completions
autoload -U compinit && compinit

# Keybindings
bindkey -e
bindkey '^p' history-search-backward
bindkey '^n' history-search-forward

# History
HISTSIZE=5000 
HISTFILE=~/.zsh_history
SAVEHIST=$HISTSIZE
HISTDUP=erase
setopt appendhistory
setopt hist_ignore_space
setopt hist_ignore_all_dups
setopt hist_save_no_dups
setopt hist_ignore_dups
setopt hist_find_no_dups
setopt inc_append_history
setopt share_history
setopt hist_expire_dups_first
setopt hist_verify

# Completion styling
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Za-z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' menu no
zstyle ':fzf-tab:complete:cd:*' fzf-preview 'ls --color $realpath'

# Aliases
alias ls='ls --color'

#Vim alias delete
unalias vim 2>/dev/null

# Function vim for nvim
function vim {
    XDG_CONFIG_HOME="$HOME/.config/.dotfiles/configs" command nvim "$@"
}

# Function sudo vim for sudo nvim
function sudo { if [[ "$1" == "vim" ]]; then shift
        XDG_CONFIG_HOME="$HOME/.config/.dotfiles/configs/nvim" command sudo -E nvim "$@"
    else
        command sudo "$@"
    fi
}

# Function hypridle conf
function hypridle {
    command hypridle -c "$HOME/.config/.dotfiles/configs/hypr/hyprland_settinigs/hypridle.conf" "$@" 
}

# Tmux function
function tmux {
  if [[ "$1" == "attach" ]]; then
    command tmux -f "$HOME/.config/.dotfiles/configs/tmux/.tmux.conf" attach "${@:2}"
  else
    command tmux -f "$HOME/.config/.dotfiles/configs/tmux/.tmux.conf" "$@"
  fi
}

# Cd function 
function cd() {
  if [[ "$1" == "repo" ]] || [[ "$1" == "dotfiles" ]]; then
    builtin cd ~/.config/.dotfiles/ 
  elif [[ "$1" == "music" ]]; then
    builtin cd ~/.config/.dotfiles/scripts/yt-dlp/yt-videos/
  else 
    builtin cd "$@"
  fi
}

# reload zshrc
function rzsh() {
  source ~/.config/.dotfiles/configs/zsh/zshrc
}

# starship



# ncmpcpp
function ncmpcpp() {
  XDG_CONFIG_HOME="$HOME/.config/.dotfiles/configs/music/" command ncmpcpp "$@"
}

function mpd() {
  command mpd "$HOME/.config/.dotfiles/configs/music/mpd/mpd.conf" "$@"
}

# function pacman() {
#   if [[ "$1" == "-S" ]]; then
#     command sudo -E pacman -S --noconfirm "${@:2}"
#   else
#     command sudo -E pacman -S"$@"
#   fi
# }

# Shell intergrations
eval "$(fzf --zsh)"

if [ -z "$NVIM" ] && [ -z "$TMUX" ]; then                                       
  tmux -f "$HOME/.config/.dotfiles/configs/tmux/.tmux.conf" attach || 
  tmux -f "$HOME/.config/.dotfiles/configs/tmux/.tmux.conf" new-session
fi

# Starship
export STARSHIP_CONFIG=~/.config/.dotfiles/configs/zsh/starship.toml
eval "$(starship init zsh)"
